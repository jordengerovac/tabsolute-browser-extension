{"ast":null,"code":"var _jsxFileName = \"/Users/jordengerovac/Desktop/Programming/BrowserExtensionProjects/redux-tabsolute/src/components/Quote.js\";\nimport '../App.css';\nimport React from 'react';\nimport { updateWidget, updateDayQuoteReceived } from '../actions/widgetActions';\nimport { connect } from 'react-redux';\nimport store from '../store';\nimport { UPDATE_QUOTE_WIDGET } from '../actions/types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Quote extends React.Component {\n  constructor() {\n    super();\n\n    this.getRandomQuote = () => {\n      fetch('https://type.fit/api/quotes').then(res => res.json()).then(result => {\n        var random_num = Math.floor(Math.random() * result.length);\n        var text = result[random_num].text;\n        var author = result[random_num].author;\n        if (author === null) author = \"Unknown\";\n        this.setState({\n          quoteText: text,\n          quoteAuthor: author\n        });\n      }).catch(function (error) {\n        console.log(error);\n      });\n    };\n\n    this.getRandomQuoteTwo = () => {\n      fetch('https://goquotes-api.herokuapp.com/api/v1/random?count=1').then(res => res.json()).then(result => {\n        var text = result.quotes[0].text;\n        var author = result.quotes[0].author;\n        var day = new Date().getDay();\n        if (author === null) author = \"Unknown\";\n        var value = text + \":@:\" + author + \":@:\" + day;\n        this.setState({\n          quoteText: text,\n          quoteAuthor: author\n        });\n        var payload = {\n          type: UPDATE_QUOTE_WIDGET,\n          payload: value,\n          id: this.props.widget.id\n        };\n        store.dispatch(payload);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    };\n\n    this.state = {\n      quoteText: \"\",\n      quoteAuthor: \"\",\n      day: \"\"\n    };\n  }\n\n  componentDidMount() {\n    console.log(parseInt(this.props.widget.value.split(\":@:\")[2]));\n\n    if (parseInt(this.props.widget.value.split(\":@:\")[2]) !== new Date().getDay()) {\n      this.getRandomQuoteTwo();\n    }\n  }\n\n  render() {\n    //console.log(this.props.widget)\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          fontSize: '20px'\n        },\n        children: this.props.widget.value.split(\":@:\")[0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          fontSize: '20px'\n        },\n        children: [\"- \", this.props.widget.value.split(\":@:\")[1]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nfunction mapStateToProps(state, ownProps) {\n  return {\n    widgetDetails: state.widgetDetails\n  };\n}\n\nexport default connect(mapStateToProps, {\n  updateWidget,\n  updateDayQuoteReceived\n})(Quote);","map":{"version":3,"sources":["/Users/jordengerovac/Desktop/Programming/BrowserExtensionProjects/redux-tabsolute/src/components/Quote.js"],"names":["React","updateWidget","updateDayQuoteReceived","connect","store","UPDATE_QUOTE_WIDGET","Quote","Component","constructor","getRandomQuote","fetch","then","res","json","result","random_num","Math","floor","random","length","text","author","setState","quoteText","quoteAuthor","catch","error","console","log","getRandomQuoteTwo","quotes","day","Date","getDay","value","payload","type","id","props","widget","dispatch","state","componentDidMount","parseInt","split","render","fontSize","mapStateToProps","ownProps","widgetDetails"],"mappings":"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","sourcesContent":["import '../App.css';\nimport React from 'react';\nimport { updateWidget, updateDayQuoteReceived } from '../actions/widgetActions';\nimport { connect } from 'react-redux';\nimport store from '../store';\nimport { UPDATE_QUOTE_WIDGET } from '../actions/types';\n\nclass Quote extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            quoteText: \"\",\n            quoteAuthor: \"\",\n            day: \"\"\n        }\n    }\n    \n    getRandomQuote = () => {\n        fetch('https://type.fit/api/quotes')\n          .then(res => res.json())\n          .then(\n          (result) => {\n            var random_num = Math.floor(Math.random() * result.length);\n            var text = result[random_num].text;\n            var author = result[random_num].author\n            if (author === null)\n                author = \"Unknown\";\n            this.setState({\n                quoteText: text,\n                quoteAuthor: author\n            })\n        })\n        .catch(function(error) {\n            console.log(error);\n        });\n    }\n\n    getRandomQuoteTwo = () => {\n        fetch('https://goquotes-api.herokuapp.com/api/v1/random?count=1')\n          .then(res => res.json())\n          .then(\n          (result) => {\n            var text = result.quotes[0].text;\n            var author = result.quotes[0].author;\n            var day = new Date().getDay();\n            if (author === null)\n                author = \"Unknown\";\n            var value = text + \":@:\" + author + \":@:\" + day\n            this.setState({\n                quoteText: text,\n                quoteAuthor: author\n            })\n            var payload = {\n                type: UPDATE_QUOTE_WIDGET,\n                payload: value,\n                id: this.props.widget.id\n            }\n            store.dispatch(payload);\n        })\n        .catch(function(error) {\n            console.log(error);\n        });\n    }\n\n    componentDidMount() {\n        console.log(parseInt(this.props.widget.value.split(\":@:\")[2]))\n        if (parseInt(this.props.widget.value.split(\":@:\")[2]) !== new Date().getDay()) {\n            this.getRandomQuoteTwo();\n        }\n    } \n\n    render() {\n        //console.log(this.props.widget)\n        return (\n            <div>\n                <p style={{fontSize: '20px'}}>{this.props.widget.value.split(\":@:\")[0]}</p>\n                <p style={{fontSize: '20px'}}>- {this.props.widget.value.split(\":@:\")[1]}</p>\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps(state, ownProps) {\n    return {\n      widgetDetails: state.widgetDetails\n    }\n}\n\nexport default connect(mapStateToProps, { updateWidget, updateDayQuoteReceived })(Quote);"]},"metadata":{},"sourceType":"module"}