{"ast":null,"code":"import { ADD_LINK_TILE, DELETE_LINK_TILE, UPDATE_LINK_TILE } from '../actions/types';\nimport { v4 as uuid } from 'uuid';\nconst initialState = {\n  tiles: [{\n    id: uuid(),\n    name: \"Twitter\",\n    value: \"https://www.twitter.com\",\n    icon: \"fab fa-twitter\"\n  }, {\n    id: uuid(),\n    name: \"Facebook\",\n    value: \"https://www.facebook.com\",\n    icon: \"fab fa-facebook\"\n  }, {\n    id: uuid(),\n    name: \"YouTube\",\n    value: \"https://www.youtube.com\",\n    icon: \"fab fa-youtube\"\n  }]\n};\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case ADD_LINK_TILE:\n      var newLinkTile = {};\n      newLinkTile = {\n        id: uuid(),\n        name: \"New Link Tile\",\n        value: \"https://www.google.com\",\n        icon: \"fas fa-link\"\n      };\n      return { ...state,\n        tiles: [...state.tiles, newLinkTile]\n      };\n\n    case DELETE_LINK_TILE:\n      const newLinkTileState = state.tiles.filter(tile => action.payload.target.id !== tile.id);\n      return { ...state,\n        tiles: newLinkTileState\n      };\n\n    case UPDATE_LINK_TILE:\n      console.log('updating');\n      const attribute = action.payload.name;\n      const newUpdateState = state.tiles.map(tile => {\n        if (tile.id === action.payload.id) {\n          if (attribute === \"name\") {\n            tile.name = action.payload.value;\n          } else if (attribute === \"icon\") {\n            tile.icon = action.payload.value;\n          } else {\n            tile.value = action.payload.value;\n          }\n        }\n\n        return tile;\n      });\n      return { ...state,\n        tiles: newUpdateState\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/jordengerovac/Desktop/Programming/ChromeExtensionProjects/redux-tabsolute/src/reducers/linkTileReducer.js"],"names":["ADD_LINK_TILE","DELETE_LINK_TILE","UPDATE_LINK_TILE","v4","uuid","initialState","tiles","id","name","value","icon","state","action","type","newLinkTile","newLinkTileState","filter","tile","payload","target","console","log","attribute","newUpdateState","map"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,gBAAxB,EAA0CC,gBAA1C,QAAkE,kBAAlE;AACA,SAASC,EAAE,IAAIC,IAAf,QAA2B,MAA3B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,CACH;AACEC,IAAAA,EAAE,EAAEH,IAAI,EADV;AAEEI,IAAAA,IAAI,EAAE,SAFR;AAGEC,IAAAA,KAAK,EAAE,yBAHT;AAIEC,IAAAA,IAAI,EAAE;AAJR,GADG,EAOH;AACEH,IAAAA,EAAE,EAAEH,IAAI,EADV;AAEEI,IAAAA,IAAI,EAAE,UAFR;AAGEC,IAAAA,KAAK,EAAE,0BAHT;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAPG,EAaH;AACEH,IAAAA,EAAE,EAAEH,IAAI,EADV;AAEEI,IAAAA,IAAI,EAAE,SAFR;AAGEC,IAAAA,KAAK,EAAE,yBAHT;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAbG;AADU,CAArB;AAuBA,eAAe,UAASC,KAAK,GAAGN,YAAjB,EAA+BO,MAA/B,EAAuC;AAClD,UAAOA,MAAM,CAACC,IAAd;AACE,SAAKb,aAAL;AACE,UAAIc,WAAW,GAAG,EAAlB;AACAA,MAAAA,WAAW,GAAG;AACZP,QAAAA,EAAE,EAAEH,IAAI,EADI;AAEZI,QAAAA,IAAI,EAAE,eAFM;AAGZC,QAAAA,KAAK,EAAE,wBAHK;AAIZC,QAAAA,IAAI,EAAE;AAJM,OAAd;AAMA,aAAO,EACL,GAAGC,KADE;AAELL,QAAAA,KAAK,EAAE,CAAC,GAAGK,KAAK,CAACL,KAAV,EAAiBQ,WAAjB;AAFF,OAAP;;AAIF,SAAKb,gBAAL;AACE,YAAMc,gBAAgB,GAAGJ,KAAK,CAACL,KAAN,CAAYU,MAAZ,CAAmBC,IAAI,IAAIL,MAAM,CAACM,OAAP,CAAeC,MAAf,CAAsBZ,EAAtB,KAA6BU,IAAI,CAACV,EAA7D,CAAzB;AACA,aAAO,EACL,GAAGI,KADE;AAELL,QAAAA,KAAK,EAAES;AAFF,OAAP;;AAIF,SAAKb,gBAAL;AACEkB,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,YAAMC,SAAS,GAAGV,MAAM,CAACM,OAAP,CAAeV,IAAjC;AACA,YAAMe,cAAc,GAAGZ,KAAK,CAACL,KAAN,CAAYkB,GAAZ,CAAiBP,IAAD,IAAU;AAC/C,YAAIA,IAAI,CAACV,EAAL,KAAYK,MAAM,CAACM,OAAP,CAAeX,EAA/B,EAAmC;AACjC,cAAIe,SAAS,KAAK,MAAlB,EAA0B;AACxBL,YAAAA,IAAI,CAACT,IAAL,GAAYI,MAAM,CAACM,OAAP,CAAeT,KAA3B;AACD,WAFD,MAGK,IAAIa,SAAS,KAAK,MAAlB,EAA0B;AAC7BL,YAAAA,IAAI,CAACP,IAAL,GAAYE,MAAM,CAACM,OAAP,CAAeT,KAA3B;AACD,WAFI,MAGA;AACHQ,YAAAA,IAAI,CAACR,KAAL,GAAaG,MAAM,CAACM,OAAP,CAAeT,KAA5B;AACD;AACF;;AACH,eAAOQ,IAAP;AACC,OAbsB,CAAvB;AAcA,aAAO,EACL,GAAGN,KADE;AAELL,QAAAA,KAAK,EAAEiB;AAFF,OAAP;;AAIF;AACE,aAAOZ,KAAP;AAzCJ;AA2CH","sourcesContent":["import { ADD_LINK_TILE, DELETE_LINK_TILE, UPDATE_LINK_TILE } from '../actions/types';\nimport { v4 as uuid } from 'uuid';\n\nconst initialState = {\n    tiles: [\n        {\n          id: uuid(),\n          name: \"Twitter\",\n          value: \"https://www.twitter.com\",\n          icon: \"fab fa-twitter\"\n        },\n        {\n          id: uuid(),\n          name: \"Facebook\",\n          value: \"https://www.facebook.com\",\n          icon: \"fab fa-facebook\"\n        },\n        {\n          id: uuid(),\n          name: \"YouTube\",\n          value: \"https://www.youtube.com\",\n          icon: \"fab fa-youtube\"\n        }\n    ]\n};\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n      case ADD_LINK_TILE:\n        var newLinkTile = {}\n        newLinkTile = {\n          id: uuid(),\n          name: \"New Link Tile\",\n          value: \"https://www.google.com\",\n          icon: \"fas fa-link\"\n        }\n        return {\n          ...state,\n          tiles: [...state.tiles, newLinkTile]\n        }\n      case DELETE_LINK_TILE:\n        const newLinkTileState = state.tiles.filter(tile => action.payload.target.id !== tile.id);\n        return {\n          ...state,\n          tiles: newLinkTileState\n        }\n      case UPDATE_LINK_TILE:\n        console.log('updating')\n        const attribute = action.payload.name;\n        const newUpdateState = state.tiles.map((tile) => {\n          if (tile.id === action.payload.id) {\n            if (attribute === \"name\") {\n              tile.name = action.payload.value\n            }\n            else if (attribute === \"icon\") {\n              tile.icon = action.payload.value\n            }\n            else {\n              tile.value = action.payload.value\n            }\n          }\n        return tile;\n        })\n        return {\n          ...state,\n          tiles: newUpdateState\n        }\n      default:\n        return state\n    }\n}"]},"metadata":{},"sourceType":"module"}