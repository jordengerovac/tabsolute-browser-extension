{"ast":null,"code":"var _jsxFileName = \"/Users/jordengerovac/Desktop/Programming/ChromeExtensionProjects/tabsolute-react-extension/src/App.js\";\nimport './App.css';\nimport React from 'react';\nimport SettingsBar from './components/SettingsBar';\nimport WeatherStatus from './components/WeatherStatus';\nimport { v4 as uuid } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.toggleSettings = () => {\n      this.setState({\n        settingsVisible: !this.state.settingsVisible\n      });\n    };\n\n    this.handleNameChange = e => {\n      this.setState({\n        name: e.target.value\n      }, () => localStorage.setItem(\"state\", JSON.stringify(this.state)));\n    };\n\n    this.handleDelete = e => {\n      const newState = this.state.widgets.filter(widget => e.target.id !== widget.id);\n    };\n\n    this.addNewWidget = e => {\n      e.preventDefault();\n      const newWidget = {\n        id: uuid(),\n        type: e.target[0].value,\n        value: \"\"\n      };\n      this.setState({\n        widgets: [...this.state.widgets, newWidget]\n      });\n    };\n\n    this.getRandomQuote = () => {\n      fetch('https://type.fit/api/quotes').then(res => res.json()).then(result => {\n        var random_num = Math.floor(Math.random() * result.length);\n        this.setState({\n          quoteText: result[random_num].text,\n          quoteAuthor: result[random_num].author\n        });\n      });\n    };\n\n    this.getWeatherStatus = city => {\n      const WEATHER_API_KEY = `${process.env.REACT_APP_WEATHER_API_KEY}`;\n      fetch('https://api.openweathermap.org/data/2.5/weather?q=' + city + '&units=metric&appid=' + WEATHER_API_KEY).then(res => res.json()).then(result => {\n        if (result.hasOwnProperty(\"main\")) {\n          this.setState({\n            temp: result.main.temp,\n            feelsLike: result.main.feels_like,\n            clouds: result.weather[0].description\n          });\n        }\n      }, error => {\n        console.log(\"error\");\n      });\n    };\n\n    this.handleCityChange = e => {\n      if (e.key === \"Enter\") {\n        this.setState({\n          city: e.target.value\n        }, () => localStorage.setItem(\"state\", JSON.stringify(this.state)));\n        this.getWeatherStatus(e.target.value);\n      }\n    };\n\n    this.tick = () => {\n      var current_time = new Date();\n      this.setState({\n        time: current_time\n      });\n\n      if (current_time.getMinutes() % 5 === 0 && current_time.getSeconds() === 0) {\n        this.setState({\n          refresh: \"true\"\n        }, () => localStorage.setItem(\"state\", JSON.stringify(this.state)));\n      }\n    };\n\n    this.state = {\n      count: 0,\n      photo: \"\",\n      time: new Date(),\n      refresh: \"false\",\n      settingsVisible: false,\n      city: \"toronto\",\n      name: \"\",\n      feelsLike: \"\",\n      temp: \"\",\n      clouds: \"\",\n      quoteText: \"\",\n      quoteAuthor: \"\",\n      widgets: [{\n        id: \"1\",\n        type: \"greeting\",\n        value: \"\"\n      }, {\n        id: \"2\",\n        type: \"time\",\n        value: \"\"\n      }, {\n        id: \"3\",\n        type: \"quote\",\n        value: \"\"\n      }]\n    };\n  }\n\n  componentDidMount() {\n    const UNSPLASH_API_KEY = `${process.env.REACT_APP_UNSPLASH_API_KEY}`;\n    /*\n    const parsedCount = Number(localStorage.getItem(\"count\") || 0);\n    const getPhoto = String(localStorage.getItem(\"photo\") || \"\");\n    const getRefresh = String(localStorage.getItem(\"refresh\") || \"false\");\n    const getName = String(localStorage.getItem(\"name\") || \"\");\n    */\n\n    var getState = JSON.parse(localStorage.getItem(\"state\"));\n\n    if (getState === null) {\n      localStorage.setItem(\"state\", JSON.stringify(this.state));\n      getState = JSON.parse(localStorage.getItem(\"state\"));\n    }\n\n    this.setState(getState); // GET photo\n\n    if (getState.photo === \"\" || getState.refresh === \"true\") {\n      fetch(\"https://api.unsplash.com/collections/764604/photos/?orientation=landscape&per_page=100&client_id=\" + UNSPLASH_API_KEY).then(res => res.json()).then(result => {\n        var random_num = Math.floor(Math.random() * result.length);\n        this.setState({\n          photo: result[random_num].urls.regular,\n          refresh: \"false\"\n        }, () => localStorage.setItem(\"state\", JSON.stringify(this.state))); //localStorage.setItem(\"photo\", result[random_num].urls.regular);\n        //localStorage.setItem(\"refresh\", \"false\");\n      }, // Note: it's important to handle errors here\n      // instead of a catch() block so that we don't swallow\n      // exceptions from actual bugs in components.\n      error => {\n        console.log(\"error\");\n      });\n    } // GET weather data\n\n\n    this.getWeatherStatus(this.state.city); // GET random quote\n\n    this.getRandomQuote();\n    setInterval(() => {\n      this.tick();\n    }, 1000);\n  }\n\n  render() {\n    const current_time = new Date();\n    var greeting = \"\";\n    var ampm = current_time.getHours() >= 12 ? 'PM' : 'AM';\n\n    if (current_time.getHours() >= 21) {\n      greeting = \"night\";\n    } else if (current_time.getHours() >= 18) {\n      greeting = \"evening\";\n    } else if (current_time.getHours() >= 12) {\n      greeting = \"afternoon\";\n    } else {\n      greeting = \"morning\";\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundImage: 'url(' + this.state.photo + ')',\n        width: '100vw',\n        height: '100vh',\n        backgroundSize: 'cover',\n        margin: '0',\n        padding: '0',\n        backgroundRepeat: 'no-repeat'\n      },\n      children: [/*#__PURE__*/_jsxDEV(SettingsBar, {\n        settingsVisible: this.state.settingsVisible,\n        toggleSettings: this.toggleSettings,\n        handleNameChange: this.handleNameChange,\n        name: this.state.name,\n        city: this.state.city,\n        handleCityChange: this.handleCityChange,\n        addNewWidget: this.addNewWidget,\n        widgets: this.state.widgets,\n        handleDelete: this.handleDelete\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"settings\",\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          style: {\n            color: 'white',\n            fontSize: '22px',\n            margin: '7px'\n          },\n          className: \"fas fa-cog\",\n          onClick: this.toggleSettings\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(WeatherStatus, {\n          city: this.state.city,\n          feelsLike: this.state.feelsLike,\n          temp: this.state.temp,\n          clouds: this.state.clouds\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"centered\",\n        style: {\n          textAlign: 'center'\n        },\n        children: this.state.widgets.map(widget => {\n          if (widget.type === \"greeting\") return /*#__PURE__*/_jsxDEV(\"h3\", {\n            style: {\n              margin: '0',\n              color: 'white'\n            },\n            children: [\"Good \", greeting, \", \", this.state.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 23\n          }, this);else if (widget.type === \"quote\") {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                style: {\n                  color: 'white'\n                },\n                children: this.state.quoteText\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 208,\n                columnNumber: 28\n              }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n                style: {\n                  color: 'white'\n                },\n                children: [\"- \", this.state.quoteAuthor]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 208,\n                columnNumber: 84\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 23\n            }, this);\n          } else if (widget.type === \"time\") {\n            return /*#__PURE__*/_jsxDEV(\"h1\", {\n              style: {\n                margin: '0',\n                color: 'white'\n              },\n              children: [current_time.toLocaleTimeString().split(\":\")[0], \":\", current_time.toLocaleTimeString().split(\":\")[1], \" \", ampm]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 23\n            }, this);\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/jordengerovac/Desktop/Programming/ChromeExtensionProjects/tabsolute-react-extension/src/App.js"],"names":["React","SettingsBar","WeatherStatus","v4","uuid","App","Component","constructor","toggleSettings","setState","settingsVisible","state","handleNameChange","e","name","target","value","localStorage","setItem","JSON","stringify","handleDelete","newState","widgets","filter","widget","id","addNewWidget","preventDefault","newWidget","type","getRandomQuote","fetch","then","res","json","result","random_num","Math","floor","random","length","quoteText","text","quoteAuthor","author","getWeatherStatus","city","WEATHER_API_KEY","process","env","REACT_APP_WEATHER_API_KEY","hasOwnProperty","temp","main","feelsLike","feels_like","clouds","weather","description","error","console","log","handleCityChange","key","tick","current_time","Date","time","getMinutes","getSeconds","refresh","count","photo","componentDidMount","UNSPLASH_API_KEY","REACT_APP_UNSPLASH_API_KEY","getState","parse","getItem","urls","regular","setInterval","render","greeting","ampm","getHours","backgroundImage","width","height","backgroundSize","margin","padding","backgroundRepeat","color","fontSize","textAlign","map","toLocaleTimeString","split"],"mappings":"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","sourcesContent":["import './App.css';\nimport React from 'react';\nimport SettingsBar from './components/SettingsBar';\nimport WeatherStatus from './components/WeatherStatus';\nimport { v4 as uuid } from 'uuid';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {      \n      count: 0,\n      photo: \"\",\n      time: new Date(),\n      refresh: \"false\",\n      settingsVisible: false,\n      city: \"toronto\",\n      name: \"\",\n      feelsLike: \"\",\n      temp: \"\",\n      clouds: \"\",\n      quoteText: \"\",\n      quoteAuthor: \"\",\n      widgets: [\n        {\n          id: \"1\",\n          type: \"greeting\",\n          value: \"\", \n        },\n        {\n          id: \"2\",\n          type: \"time\",\n          value: \"\",\n        },\n        {\n          id: \"3\",\n          type: \"quote\",\n          value: \"\"\n        }\n      ]\n    };\n  }\n\n  toggleSettings = () => {\n    this.setState({\n      settingsVisible: !this.state.settingsVisible\n    })\n  }\n\n  handleNameChange = (e) => {\n    this.setState({\n      name: e.target.value\n    }, () => localStorage.setItem(\"state\", JSON.stringify(this.state)));\n  }\n\n  handleDelete = (e) => {\n    const newState = this.state.widgets.filter(widget => e.target.id !== widget.id);\n    \n  }\n\n  addNewWidget = (e) => {\n    e.preventDefault();\n    const newWidget = {\n      id: uuid(),\n      type: e.target[0].value,\n      value: \"\"\n    }\n    this.setState({\n      widgets: [...this.state.widgets, newWidget]\n    })\n  }\n\n  getRandomQuote = () => {\n    fetch('https://type.fit/api/quotes')\n      .then(res => res.json())\n      .then(\n      (result) => {\n        var random_num = Math.floor(Math.random() * result.length);\n        this.setState({\n          quoteText: result[random_num].text,\n          quoteAuthor: result[random_num].author\n        })\n      }\n      )\n  }\n\n  getWeatherStatus = (city) => {\n    const WEATHER_API_KEY = `${process.env.REACT_APP_WEATHER_API_KEY}`\n    fetch('https://api.openweathermap.org/data/2.5/weather?q=' + city + '&units=metric&appid=' + WEATHER_API_KEY)\n      .then(res => res.json())\n      .then(\n      (result) => {\n        if (result.hasOwnProperty(\"main\")) {\n          this.setState({\n            temp: result.main.temp,\n            feelsLike: result.main.feels_like,\n            clouds: result.weather[0].description\n          });\n        }\n      },\n      (error) => {\n          console.log(\"error\")\n      }\n    )\n}\n\n  handleCityChange = (e) => {\n    if (e.key === \"Enter\") {\n      this.setState({\n        city: e.target.value\n      }, () => localStorage.setItem(\"state\", JSON.stringify(this.state)));\n      this.getWeatherStatus(e.target.value);\n    }\n  }\n\n  tick = () => {\n    var current_time = new Date();\n    this.setState({\n      time: current_time\n    });\n\n    if (current_time.getMinutes() % 5 === 0 && current_time.getSeconds() === 0) {\n      this.setState({\n        refresh: \"true\"\n      }, () => localStorage.setItem(\"state\", JSON.stringify(this.state)));\n    }\n  }\n\n\n  componentDidMount() {\n    const UNSPLASH_API_KEY = `${process.env.REACT_APP_UNSPLASH_API_KEY}`;\n    /*\n    const parsedCount = Number(localStorage.getItem(\"count\") || 0);\n    const getPhoto = String(localStorage.getItem(\"photo\") || \"\");\n    const getRefresh = String(localStorage.getItem(\"refresh\") || \"false\");\n    const getName = String(localStorage.getItem(\"name\") || \"\");\n    */\n\n    var getState = JSON.parse(localStorage.getItem(\"state\"));\n    if (getState === null) {\n      localStorage.setItem(\"state\", JSON.stringify(this.state));\n      getState = JSON.parse(localStorage.getItem(\"state\"));\n    }\n    this.setState(getState);\n\n    // GET photo\n    if (getState.photo === \"\" || getState.refresh === \"true\") {\n      fetch(\"https://api.unsplash.com/collections/764604/photos/?orientation=landscape&per_page=100&client_id=\" + UNSPLASH_API_KEY)\n        .then(res => res.json())\n        .then(\n          (result) => {\n            var random_num = Math.floor(Math.random() * result.length);\n            this.setState({\n              photo: result[random_num].urls.regular,\n              refresh: \"false\"\n            }, () => localStorage.setItem(\"state\", JSON.stringify(this.state)))\n            //localStorage.setItem(\"photo\", result[random_num].urls.regular);\n            //localStorage.setItem(\"refresh\", \"false\");\n          },\n          // Note: it's important to handle errors here\n          // instead of a catch() block so that we don't swallow\n          // exceptions from actual bugs in components.\n          (error) => {\n            console.log(\"error\")\n          }\n        )\n    }\n\n    // GET weather data\n    this.getWeatherStatus(this.state.city);\n\n    // GET random quote\n    this.getRandomQuote();\n\n    setInterval(() => {\n      this.tick();\n    }, 1000);\n  }\n\n  render(){\n    const current_time = new Date();\n    var greeting = \"\";\n    var ampm = current_time.getHours() >= 12 ? 'PM' : 'AM';\n    if (current_time.getHours() >= 21) {\n      greeting = \"night\";\n    }\n    else if (current_time.getHours() >= 18) {\n      greeting = \"evening\";\n    }\n    else if (current_time.getHours() >= 12) {\n      greeting = \"afternoon\"\n    }\n    else {\n      greeting = \"morning\"\n    }\n\n    return (\n      <div style={{backgroundImage: 'url(' + this.state.photo + ')', width: '100vw', height: '100vh', backgroundSize: 'cover', margin: '0', padding: '0', backgroundRepeat: 'no-repeat'}}>\n        <SettingsBar settingsVisible={this.state.settingsVisible} toggleSettings={this.toggleSettings} handleNameChange={this.handleNameChange} name={this.state.name} city={this.state.city} handleCityChange={this.handleCityChange} addNewWidget={this.addNewWidget} widgets={this.state.widgets} handleDelete={this.handleDelete}/>\n        <div className=\"settings\">\n          <i style={{color: 'white', fontSize: '22px', margin: '7px'}} className=\"fas fa-cog\" onClick={this.toggleSettings}></i>\n          <WeatherStatus city={this.state.city} feelsLike={this.state.feelsLike} temp={this.state.temp} clouds={this.state.clouds} />\n        </div>\n          <div className=\"centered\" style={{textAlign: 'center'}}>\n          {this.state.widgets.map((widget) => {\n            if (widget.type === \"greeting\") \n              return (<h3 style={{margin: '0', color: 'white'}}>Good {greeting}, {this.state.name}</h3>)\n            else if (widget.type === \"quote\") {\n              return (<div><h4 style={{color: 'white'}}>{this.state.quoteText}</h4><h4 style={{color: 'white'}}>- {this.state.quoteAuthor}</h4></div>)\n             }\n            else if (widget.type === \"time\") {\n              return (<h1 style={{margin: '0', color: 'white'}}>{current_time.toLocaleTimeString().split(\":\")[0]}:{current_time.toLocaleTimeString().split(\":\")[1]} {ampm}</h1>)\n             }\n            }\n          )}\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}