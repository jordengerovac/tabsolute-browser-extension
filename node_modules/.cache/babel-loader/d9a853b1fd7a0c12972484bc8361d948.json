{"ast":null,"code":"import _toConsumableArray from\"/Users/jordengerovac/Desktop/Programming/ChromeExtensionProjects/redux-tabsolute/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/Users/jordengerovac/Desktop/Programming/ChromeExtensionProjects/redux-tabsolute/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{ADD_LINK_TILE,DELETE_LINK_TILE,UPDATE_LINK_TILE}from'../actions/types';import{v4 as uuid}from'uuid';var initialState={tiles:[{id:uuid(),name:\"Twitter\",value:\"https://www.twitter.com\",icon:\"fab fa-twitter\"},{id:uuid(),name:\"Facebook\",value:\"https://www.facebook.com\",icon:\"fab fa-facebook\"},{id:uuid(),name:\"YouTube\",value:\"https://www.youtube.com\",icon:\"fab fa-youtube\"}]};export default function(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case ADD_LINK_TILE:var newLinkTile={};newLinkTile={id:uuid(),name:\"New Link Tile\",value:\"https://www.google.com\",icon:\"fas fa-link\"};return _objectSpread(_objectSpread({},state),{},{tiles:[].concat(_toConsumableArray(state.tiles),[newLinkTile])});case DELETE_LINK_TILE:var newLinkTileState=state.tiles.filter(function(tile){return action.payload.target.id!==tile.id;});return _objectSpread(_objectSpread({},state),{},{tiles:newLinkTileState});case UPDATE_LINK_TILE:var attribute=action.payload.target.name;var newUpdateState=state.tiles.map(function(tile){if(tile.id===action.payload.target.id){if(attribute===\"name\"){tile.name=action.payload.target.value;}else if(attribute===\"icon\"){tile.icon=action.payload.target.value;}else{tile.value=action.payload.target.value;}}return tile;});return _objectSpread(_objectSpread({},state),{},{tiles:newUpdateState});default:return state;}}","map":{"version":3,"sources":["/Users/jordengerovac/Desktop/Programming/ChromeExtensionProjects/redux-tabsolute/src/reducers/linkTileReducer.js"],"names":["ADD_LINK_TILE","DELETE_LINK_TILE","UPDATE_LINK_TILE","v4","uuid","initialState","tiles","id","name","value","icon","state","action","type","newLinkTile","newLinkTileState","filter","tile","payload","target","attribute","newUpdateState","map"],"mappings":"qZAAA,OAASA,aAAT,CAAwBC,gBAAxB,CAA0CC,gBAA1C,KAAkE,kBAAlE,CACA,OAASC,EAAE,GAAIC,CAAAA,IAAf,KAA2B,MAA3B,CAEA,GAAMC,CAAAA,YAAY,CAAG,CACjBC,KAAK,CAAE,CACH,CACEC,EAAE,CAAEH,IAAI,EADV,CAEEI,IAAI,CAAE,SAFR,CAGEC,KAAK,CAAE,yBAHT,CAIEC,IAAI,CAAE,gBAJR,CADG,CAOH,CACEH,EAAE,CAAEH,IAAI,EADV,CAEEI,IAAI,CAAE,UAFR,CAGEC,KAAK,CAAE,0BAHT,CAIEC,IAAI,CAAE,iBAJR,CAPG,CAaH,CACEH,EAAE,CAAEH,IAAI,EADV,CAEEI,IAAI,CAAE,SAFR,CAGEC,KAAK,CAAE,yBAHT,CAIEC,IAAI,CAAE,gBAJR,CAbG,CADU,CAArB,CAuBA,cAAe,WAAuC,IAA9BC,CAAAA,KAA8B,2DAAtBN,YAAsB,IAARO,CAAAA,MAAQ,2CAClD,OAAOA,MAAM,CAACC,IAAd,EACE,IAAKb,CAAAA,aAAL,CACE,GAAIc,CAAAA,WAAW,CAAG,EAAlB,CACAA,WAAW,CAAG,CACZP,EAAE,CAAEH,IAAI,EADI,CAEZI,IAAI,CAAE,eAFM,CAGZC,KAAK,CAAE,wBAHK,CAIZC,IAAI,CAAE,aAJM,CAAd,CAMA,sCACKC,KADL,MAEEL,KAAK,8BAAMK,KAAK,CAACL,KAAZ,GAAmBQ,WAAnB,EAFP,GAIF,IAAKb,CAAAA,gBAAL,CACE,GAAIc,CAAAA,gBAAgB,CAAGJ,KAAK,CAACL,KAAN,CAAYU,MAAZ,CAAmB,SAAAC,IAAI,QAAIL,CAAAA,MAAM,CAACM,OAAP,CAAeC,MAAf,CAAsBZ,EAAtB,GAA6BU,IAAI,CAACV,EAAtC,EAAvB,CAAvB,CACA,sCACKI,KADL,MAEEL,KAAK,CAAES,gBAFT,GAIF,IAAKb,CAAAA,gBAAL,CACE,GAAIkB,CAAAA,SAAS,CAAGR,MAAM,CAACM,OAAP,CAAeC,MAAf,CAAsBX,IAAtC,CACA,GAAIa,CAAAA,cAAc,CAAGV,KAAK,CAACL,KAAN,CAAYgB,GAAZ,CAAgB,SAACL,IAAD,CAAU,CAC7C,GAAIA,IAAI,CAACV,EAAL,GAAYK,MAAM,CAACM,OAAP,CAAeC,MAAf,CAAsBZ,EAAtC,CAA0C,CACxC,GAAIa,SAAS,GAAK,MAAlB,CAA0B,CACxBH,IAAI,CAACT,IAAL,CAAYI,MAAM,CAACM,OAAP,CAAeC,MAAf,CAAsBV,KAAlC,CACD,CAFD,IAGK,IAAIW,SAAS,GAAK,MAAlB,CAA0B,CAC7BH,IAAI,CAACP,IAAL,CAAYE,MAAM,CAACM,OAAP,CAAeC,MAAf,CAAsBV,KAAlC,CACD,CAFI,IAGA,CACHQ,IAAI,CAACR,KAAL,CAAaG,MAAM,CAACM,OAAP,CAAeC,MAAf,CAAsBV,KAAnC,CACD,CACF,CACH,MAAOQ,CAAAA,IAAP,CACC,CAboB,CAArB,CAcA,sCACKN,KADL,MAEEL,KAAK,CAAEe,cAFT,GAIF,QACE,MAAOV,CAAAA,KAAP,CAxCJ,CA0CH","sourcesContent":["import { ADD_LINK_TILE, DELETE_LINK_TILE, UPDATE_LINK_TILE } from '../actions/types';\nimport { v4 as uuid } from 'uuid';\n\nconst initialState = {\n    tiles: [\n        {\n          id: uuid(),\n          name: \"Twitter\",\n          value: \"https://www.twitter.com\",\n          icon: \"fab fa-twitter\"\n        },\n        {\n          id: uuid(),\n          name: \"Facebook\",\n          value: \"https://www.facebook.com\",\n          icon: \"fab fa-facebook\"\n        },\n        {\n          id: uuid(),\n          name: \"YouTube\",\n          value: \"https://www.youtube.com\",\n          icon: \"fab fa-youtube\"\n        }\n    ]\n};\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n      case ADD_LINK_TILE:\n        var newLinkTile = {}\n        newLinkTile = {\n          id: uuid(),\n          name: \"New Link Tile\",\n          value: \"https://www.google.com\",\n          icon: \"fas fa-link\"\n        }\n        return {\n          ...state,\n          tiles: [...state.tiles, newLinkTile]\n        }\n      case DELETE_LINK_TILE:\n        var newLinkTileState = state.tiles.filter(tile => action.payload.target.id !== tile.id);\n        return {\n          ...state,\n          tiles: newLinkTileState\n        }\n      case UPDATE_LINK_TILE:\n        var attribute = action.payload.target.name;\n        var newUpdateState = state.tiles.map((tile) => {\n          if (tile.id === action.payload.target.id) {\n            if (attribute === \"name\") {\n              tile.name = action.payload.target.value\n            }\n            else if (attribute === \"icon\") {\n              tile.icon = action.payload.target.value\n            }\n            else {\n              tile.value = action.payload.target.value\n            }\n          }\n        return tile;\n        })\n        return {\n          ...state,\n          tiles: newUpdateState\n        }\n      default:\n        return state\n    }\n}"]},"metadata":{},"sourceType":"module"}